#!/bin/bash

GemServer="$1"
Port="$2"
PortName=`echo ${Port} | sed "s/'//g"`  #strip ' off in case of a non-integer argument

set -e # exit on error

# Debugging controls - uncomemnt and edit debugging env vars as desired:

# The default behaviour is to delete this process's log file if it exits
# normally. If you want to keep this process's log file even on normal exit
# then uncomment the following
#
# export GEMSTONE_KEEP_LOG=1

#  Print Smalltalk stack and instance counts when OutOfMemory error occurs
#
# export GS_DEBUG_VMGC_VERBOSE_OUTOFMEM=1

# --------------------------------
# GS_DEBUG_VMGC_PRINT_MKSW_MEMORY_USED specifies a percent of memory
# used threshold.
# If the GS_DEBUG_VMGC_PRINT_MKSW_MEMORY_USED environment variable
# is not defined, the default is 75 percent.
# At the end of each mark sweep, if the percent used is greater than
# this threshold, the markSweep is printed, the Smalltalk stack
# is printed to stdout, and the threshold is raised by 5 percent.  Thus in
# situation producing error 4067, OutOfMemory, you should get several
# Smalltalk stacks printed in the gem log file before the session dies.
#
# export GS_DEBUG_VMGC_PRINT_MKSW_MEMORY_USED=75

secret=${GEMSTONE_ETC_SECRET}
if [ "${GEMSTONE_ETC_SECRET}x" = "x" ] ; then
  secret=$GEMSTONE/seaside/etc/gemstone.secret
fi

if [ -s $secret ]; then
    . $secret
else
    echo 'Missing password file $secret'
    exit 1
fi

if [ "${3}x" = "x" ] ; then
  ExeArg="-e $(dirname $0)/gem.conf"
else
  ExeArg="-e $3"
fi

logDir=${GEMSTONE_LOGDIR}
if [ "${logDir}x" = "x" ] ; then
  logDir=/opt/gemstone/log
fi
logFile="${logDir}/${GemServer}_server-${PortName}.log"

username=$GEMSTONE_USER_NAME
if [ "${GEMSTONE_USER_NAME}x" = "x" ] ; then
  username=DataCurator
fi

echo "Starting $GemServer on $Port exeConf: -$ExeConf- logFile: -$logFile-"

cat << EOF | nohup $GEMSTONE/bin/topaz -l ${ExeArg} >> $logFile 2>&1 &

set user $username pass $GEMSTONE_CURATOR_PASS gems $GEMSTONE_NAME

display oops
iferror stack

login

run
(GemServerRegistry gemServerNamed: '$GemServer') scriptStartServiceOn: $Port.
%

run
| logEntry |
System beginTransaction.
(logEntry := ObjectLogEntry
  fatal: '${GemServer}_server_${PortName}: topaz exit'
  object:
    'pid: ', (System gemVersionReport at: 'processId') printString) addToLog.
(GemServerRegistry gemServerNamed: '$GemServer')
  ifNotNil: [:gemServer | gemServer crashLog add: (${PortName}) asString -> logEntry ].
System commitTransaction.
%

EOF
